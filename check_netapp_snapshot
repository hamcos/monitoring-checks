#!/usr/bin/env python
# encoding: utf-8
# @author Robin Schneider <robin.schneider@hamcos.de>
# @company hamcos IT Service GmbH http://www.hamcos.de
# @license GPLv2 <https://www.gnu.org/licenses/gpl-2.0.html>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, version 3 of the
# License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

"""
Nagios/Icinga check for the snapshot age of a NetApp storage system.
Additionally, this check can also fed the number of snapshots per volume as
passive check into the core.
"""

__version__ = '0.7'

# modules {{{
# std {{{
import sys
import logging
from time import time
from datetime import datetime
# }}}

from xml.sax.saxutils import escape
from NaServer import NaServer, NaElement
# }}}


def check_netapp_snapshot_age(
        na_server,
        max_age_days,
        max_records=500,
        abort_after=None,
        ):

    status_detail = "UNKNOWN - "
    exit_status = 3
    snapshot_count_per_volume = dict()

    cur_time = int(time())
    time_before = cur_time - max_age_days*24*60*60

    next_tag = False

    # http://community.netapp.com/t5/Software-Development-Kit-SDK-and-API-Discussions/volume-get-iter-iteration-tag-not-working-as-expected/m-p/102384/highlight/true#M1425
    # while next_tag is not None:
    #    next_tag = escape(next_tag)
    #    if api.child_get("tag") is None:
    #       api.child_add_string("tag", next_tag)
    #    else:
    #       api.child_get("tag").set_content(next_tag)
    #    output = na_server.invoke_elem(api)
    #    print "OUTPUT:\n%s\n\n" % (output.sprintf())
    #    next_tag = output.child_get_string("next-tag")

    query = NaElement('snapshot-get-iter')
    query.child_add_string('max-records', max_records)
    # query.child_add_string('desired-attributes', NaElement('name', ''))

    total_snapshot_count = 0
    while next_tag is not None:

        if next_tag:
            logging.info('next-tag')
            next_tag = escape(next_tag)
            if query.child_get('tag') is None:
                query.child_add_string('tag', next_tag)
            else:
                query.child_get('tag').set_content(next_tag)

        # logging.info(query.sprintf())
        na_answer = na_server.invoke_elem(query)

        if na_answer.results_errno() != 0:
            status_detail += str(na_answer.results_reason())
        else:
            volumes_old_snapshot = []
            volumes_ok = []

            logging.debug(na_answer.sprintf())

            elements = na_answer.child_get('attributes-list')
            for element in elements.children_get():
                name = element.child_get_string('name')
                volume = element.child_get_string('volume')
                access_time = int(element.child_get_string('access-time'))
                total_snapshot_count += 1
                if volume in snapshot_count_per_volume:
                    snapshot_count_per_volume[volume] += 1
                else:
                    snapshot_count_per_volume[volume] = 1
                logging.info('{}: {}'.format(volume, name, str(access_time)))
                if access_time < time_before:
                    volumes_old_snapshot.append('%s: %s' % (volume, datetime.fromtimestamp(access_time).strftime('%Y-%m-%d %H:%M:%S')))
                else:
                    volumes_ok.append(volume)

            if len(volumes_old_snapshot) != 0:
                exit_status = 1
                status_detail = "WARN - Snapshots older than {} days: {}".format(max_age_days, ',\\n'.join(volumes_old_snapshot))
            elif len(volumes_ok) != 0:
                status_detail = "OK - Snapshots are not older than {} days: {}".format(max_age_days, ',\\n'.join(volumes_ok))
                exit_status = 0

            next_tag = na_answer.child_get_string('next-tag')

            if abort_after is not None and total_snapshot_count >= abort_after:
                break

    return {
        'exit_status': exit_status,
        'status_detail': status_detail,
        'snapshot_count_per_volume': snapshot_count_per_volume,
    }


# main {{{
if __name__ == '__main__':

    from argparse import ArgumentParser

    args_parser = ArgumentParser(
        description=__doc__,
    )
    args_parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s {version}'.format(version=__version__)
    )
    args_parser.add_argument(
        '-d', '--debug',
        help="Print lots of debugging statements",
        action="store_const", dest="loglevel", const=logging.DEBUG,
        default=logging.WARNING,
    )
    args_parser.add_argument(
        '-v', '--verbose',
        help="Be verbose",
        action="store_const", dest="loglevel", const=logging.INFO,
    )
    args_parser.add_argument(
        'hostname',
    )
    args_parser.add_argument(
        'user',
    )
    args_parser.add_argument(
        'password',
    )
    args_parser.add_argument(
        '-m', '--max-age-days',
        help="Maximum age of a snapshot."
        " If the snapshot is older then the value specified, a warning will be produced."
        " Default: %(default)s",
        default=1,
        type=int,
    )
    args_parser.add_argument(
        '-c', '--command-file',
        help="Command file/socket of the core."
        " Used to fed passive checks into the core."
        " Default: %(default)s",
        default='/var/lib/icinga/rw/icinga.cmd',
        type=unicode,
    )
    args_parser.add_argument(
        '-W', '--warn-num-snapshots',
        help="Warn if more then the given number of snapshots exist."
        " Default: %(default)s",
        default=240,
        type=int,
    )
    args_parser.add_argument(
        '-C', '--critical-num-snapshots',
        help="Critical event if more then the given number of snapshots exist."
        " Default: %(default)s",
        default=250,
        type=int,
    )
    args_parser.add_argument(
        '-n', '--snapshot-count-service',
        help="Service description of the passively fed snapshot count service."
        " This feature is only active if a name was given."
        " Default: %(default)s",
        type=unicode,
    )
    args_parser.add_argument(
        '-r', '--max-records',
        help="Maximum number of snapshots to request from the Filer."
        " If this number is to low, you might miss snapshots."
        " Note that the tested NetApp did not return more than 1000 entries at at time even if asked for more."
        " Default: %(default)s",
        default=500,
        type=int,
    )
    args_parser.add_argument(
        '-a', '--abort-after',
        help="Stop querying for more entry after the given number of entries has been reached."
        " Useful during development."
        " Default: %(default)s",
        default=None,
        type=int,
    )
    args = args_parser.parse_args()
    logger = logging.getLogger(__file__)
    logging.basicConfig(
        format='%(levelname)s: %(message)s',
        level=args.loglevel,
    )

    na_server = NaServer(args.hostname, 1, 1)
    na_server.set_server_type('Filer')
    na_server.set_admin_user(args.user, args.password)
    na_server.set_transport_type('HTTPS')

    result = check_netapp_snapshot_age(
        na_server,
        args.max_age_days,
        max_records=args.max_records,
        abort_after=args.abort_after,
    )

    if args.snapshot_count_service:
        warn = args.warn_num_snapshots
        critical = args.critical_num_snapshots

        critical_snapshot_count = []
        warn_snapshot_count = []
        ok_snapshot_count = []

        for volume, snapshot_count in result['snapshot_count_per_volume'].iteritems():
            if args.critical_num_snapshots and  snapshot_count > critical:
                critical_snapshot_count.append('{} has {} snapshots'.format( volume, snapshot_count))
            elif args.warn_num_snapshots and snapshot_count > warn:
                warn_snapshot_count.append('{} has {} snapshots'.format( volume, snapshot_count))
            else:
                ok_snapshot_count.append('{} has {} snapshots'.format( volume, snapshot_count))

        status_detail = "UNKNOWN - "
        exit_status = 3
        if len(critical_snapshot_count) != 0:
            exit_status = 2
            status_detail = "CRIT - The following volumes have too many snapshots: {}".format(
                ',\\n'.join(critical_snapshot_count),
            )
        elif len(warn_snapshot_count) != 0:
            exit_status = 1
            status_detail = "WARN - The following volumes have too many snapshots: {}".format(
                ',\\n'.join(warn_snapshot_count),
            )
        elif len(ok_snapshot_count) != 0:
            exit_status = 0
            status_detail = "OK - The number of snapshots per volume is OK for all volumes: {}".format(
                ',\\n'.join(ok_snapshot_count),
            )

        count_file = open(args.command_file, 'a')
        count_file.write(
            '[{}] PROCESS_SERVICE_CHECK_RESULT;{};{};{};{}\n'.format(
                int(time()),
                args.hostname,
                args.snapshot_count_service,
                exit_status,
                status_detail,
            )
        )
        count_file.close()

    print(result['status_detail'])
    logging.info("Snapshot count is {}.".format(result['snapshot_count_per_volume']))
    sys.exit(result['exit_status'])

# }}}
