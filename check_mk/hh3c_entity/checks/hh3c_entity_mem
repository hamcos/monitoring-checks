#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# @author Robin Schneider <robin.schneider@hamcos.de>
# @company hamcos IT Service GmbH http://www.hamcos.de
# @license AGPLv3 <https://www.gnu.org/licenses/agpl-3.0.html>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, version 3 of the
# License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Tested with:
#   * HP Comware Platform Software, Software Version 5.20.99 Release 2221P02 HP A5120-48G EI Switch with 2 Interface Slots Copyright (c) 2010-2014 Hewlett-Packard Development Company, L.P.
#   * HP Comware Platform Software, Software Version 5.20.105, Release 1808P25 HP A5820AF-24XG Switch Copyright (c) 2010-2014 Hewlett-Packard Development Company, L.P.
#
# Thresholds can be quired for via:
# * 1.3.6.1.4.1.25506.2.6.1.1.1.1.9 (hh3cEntityExtMemUsageThreshold): Always set to 100.

hh3c_entity_mem_default_levels = (80.0, 90.0)

def inventory_hh3c_entity_mem(info):
    # Debug: lets see how the data we get looks like
    # import pprint ; pprint.pprint(info)

    module = 1.0

    for nr, elem in enumerate(info):
        ent_physical_descr, mem_usage_present = elem
        name = _hh3c_entity_get_name_for_sensor(nr, ent_physical_descr, module)
        if name:
            yield name, 'hh3c_entity_mem_default_levels'

            module += 1.0

def check_hh3c_entity_mem(item, params, info):
    for nr, elem in enumerate(info):
        if unicode(item).startswith(unicode(nr) + ' '):
            ent_physical_descr, mem_usage_present = elem
            mem_usage_present = int(mem_usage_present)

            status = 0
            output = ''
            if mem_usage_present >= params[1]:
                status = 2
                output = ' (Above %d%%)' % params[1]
            elif mem_usage_present >= params[0]:
                status = 1
                output = ' (Above %d%%)' % params[0]

            perfdata = [('util', mem_usage_present, params[0], params[1], 0, 100)]

            return (status, 'Memory usage is %d%% %s' % (mem_usage_present, output), perfdata)

    return (3, "Invalid information in snmp data")

check_info['hh3c_entity_mem'] = {
    'check_function'        : check_hh3c_entity_mem,
    'inventory_function'    : inventory_hh3c_entity_mem,
    'service_description'   : 'Memory used',
    'snmp_scan_function'    : lambda oid: 'HP Comware Platform Software' in oid('.1.3.6.1.2.1.1.1.0') and \
        oid('.1.3.6.1.4.1.25506.2.6.1.1.1.1.8.1') != None,
    'snmp_info'             : ( '.1.3.6.1',
        [
            '2.1.47.1.1.1.1.2',
            '4.1.25506.2.6.1.1.1.1.8',
            # '4.1.25506.2.6.1.1.1.1.9',
        ] ),
    'has_perfdata'          : True,
    'includes'              : [ 'hh3c_entity.include' ],
    'group'                 : 'memory',
}
