#!/usr/bin/env python
# encoding: utf-8
# @author Robin Schneider <robin.schneider@hamcos.de>
# @company hamcos IT Service GmbH http://www.hamcos.de
# @licence GPLv3+ <http://www.gnu.org/licenses/gpl.html>

import sys, time
from common import *

# sys.path.append("/usr/local/lib/python/NetApp/")
from NaServer import *
from datetime import datetime

args = len(sys.argv) - 1
if (args < 3):
    print_usage()

filer    = sys.argv[1]
user     = sys.argv[2]
password = sys.argv[3]

max_age_days = 1
if args > 3:
    max_age_days = int(sys.argv[4])

cur_time = int(time.time())
time_before = cur_time - max_age_days*24*60*60

s = NaServer(filer, 1, 1)
s.set_server_type('Filer')
s.set_admin_user(user, password)
s.set_transport_type('HTTPS')

status_detail = 'UNKNOWN - '
exit_status = 3

## FIXME: Handle max-records
output = s.invoke('snapshot-get-iter', 'max-records', 9999)

if output.results_errno() != 0:
    status_detail += str(output.results_reason())
else:
    volumes_old_snapshot = []
    volumes_ok = []

    # print(output.sprintf())

    output = output.child_get('attributes-list')
    # print output.sprintf()
    for i in output.children_get():
        name = i.child_get_string('name')
        volume = i.child_get_string('volume')
        access_time = int(i.child_get_string('access-time'))
        # print ', '.join([ volume, name, str(access_time) ])
        if access_time < time_before:
            volumes_old_snapshot.append('%s: %s' % (volume, datetime.fromtimestamp(access_time).strftime('%Y-%m-%d %H:%M:%S')))
        else:
            if len(volumes_ok) < 30:
                volumes_ok.append(volume)

    if len(volumes_old_snapshot) != 0:
       exit_status = 1
       status_detail = "WARN - Snapshots older than {} days: {}".format(max_age_days, ', '.join(volumes_old_snapshot))
    elif len(volumes_ok) != 0:
        status_detail = "OK - Snapshots are not older than {} days: {}".format(max_age_days, ', '.join(volumes_ok))
        exit_status = 0

print status_detail
sys.exit(exit_status)
